{"version":3,"file":"static/js/156.37784cf5.chunk.js","mappings":"sQAEaA,EAAOC,EAAAA,GAAAA,KAAH,6FAMJC,EAAQD,EAAAA,GAAAA,MAAH,wEAKLE,EAAQF,EAAAA,GAAAA,MAAH,qPAcLG,EAASH,EAAAA,GAAAA,OAAH,sT,2BCtBbI,EAAW,IAAIC,EAAAA,EAEN,SAASC,IAAU,IAAD,EAC/B,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCL,EAAAA,EAAAA,UAAQ,UAC5CI,EAAaE,IAAI,gBAD2B,QACf,IAD/B,eAAOC,EAAP,KAAoBC,EAApB,KAGMC,GAAWC,EAAAA,EAAAA,MAOXC,EAAY,mCAAG,WAAMC,GAAN,8EACnBA,EAAEC,iBADiB,kBAGEhB,EAASiB,UAAUP,GAHrB,OAGXQ,EAHW,OAIjBb,EAAUa,EAAKC,SAJE,gDAMjBC,QAAQC,MAAR,MANiB,yDAAH,sDAUlB,OACE,iCACE,UAAC1B,EAAD,CAAM2B,SAAUR,EAAhB,WACE,SAACjB,EAAD,CAAO0B,QAAQ,QAAf,yFACA,SAACzB,EAAD,CACE0B,aAAcd,EACde,SAtBkB,SAAAV,GACxB,IAAMW,EAAQX,EAAEY,OAAOD,MACvBf,EAAee,GACAlB,EAAL,KAAVkB,EAA+B,CAAC,EAAqB,CAAEE,MAAOF,GAC/D,EAmBOG,KAAK,OACLC,GAAG,cACHC,KAAK,cACLC,YAAY,oHAEd,SAACjC,EAAD,CAAQ8B,KAAK,SAAb,gDAEF,wBACGzB,EAAO6B,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMxB,GAAYyB,GAAE,kBAAaH,EAAMJ,IAAtD,SACGI,EAAMI,SAFFJ,EAAMJ,GADA,QAUxB,C,gHCrDKS,EAAU,mCACVC,EAAW,+BAEIvC,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,EAAAA,CA6CnB,OA7CmBA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MACnB,6GAE2BwC,EAAAA,EAAAA,IAAA,UAClBD,EADkB,uCACqBD,IAHhD,cAEUG,EAFV,yBAKWA,EAASxB,MALpB,gCAOIE,QAAQC,MAAR,MAPJ,2GADmBpB,IACnB,0DAWA,WAAgB2B,GAAhB,gGAE2Ba,EAAAA,EAAAA,IAAA,UAClBD,EADkB,iCACeD,EADf,iCAC+CX,EAD/C,gCAF3B,cAEUc,EAFV,yBAKWA,EAASxB,MALpB,gCAOIE,QAAQC,MAAR,MAPJ,4GAXA,IAWA,gEAWA,WAAsBsB,GAAtB,gGAE2BF,EAAAA,EAAAA,IAAA,UAClBD,EADkB,kBACAG,EADA,oBACmBJ,EADnB,oBAF3B,cAEUG,EAFV,yBAKWA,EAASxB,MALpB,gCAOIE,QAAQC,MAAR,MAPJ,4GAXA,IAWA,gEAWA,WAAsBsB,GAAtB,gGAE2BF,EAAAA,EAAAA,IAAA,UAClBD,EADkB,kBACAG,EADA,4BAC2BJ,EAD3B,oBAF3B,cAEUG,EAFV,yBAKWA,EAASxB,MALpB,gCAOIE,QAAQC,MAAR,MAPJ,4GAXA,IAWA,gEAWA,WAAsBsB,GAAtB,gGAE2BF,EAAAA,EAAAA,IAAA,UAClBD,EADkB,kBACAG,EADA,4BAC2BJ,EAD3B,oBAF3B,cAEUG,EAFV,yBAKWA,EAASxB,MALpB,gCAOIE,QAAQC,MAAR,MAPJ,4GAXA,MAWA,EA7CmBpB,E","sources":["pages/InputStyled.js","pages/Movies.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Label = styled.label`\n  font-size: 1.2rem;\n  margin-bottom: 0.5rem;\n`;\n\nexport const Input = styled.input`\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n  width: 400px;\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 2px 2px #bde4ff;\n    border: 1px solid #6ec6ff;\n  }\n`;\n\nexport const Button = styled.button`\n  background-color: #0074d9;\n  color: #fff;\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background-color: #6ec6ff;\n    color: yellow;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n","import { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { Button, Form, Input, Label } from './InputStyled';\nimport { useState } from 'react';\nimport MovieAPI from 'services/Api';\n\nconst movieApi = new MovieAPI();\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchQuery, setSearchQuery] = useState(\n    searchParams.get('query') ?? ''\n  );\n  const location = useLocation();\n  const updateQueryString = e => {\n    const value = e.target.value;\n    setSearchQuery(value);\n    value === '' ? setSearchParams({}) : setSearchParams({ query: value });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const data = await movieApi.getMovies(searchQuery);\n      setMovies(data.results);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Label htmlFor=\"query\">Пошук фільмів:</Label>\n        <Input\n          defaultValue={searchQuery}\n          onChange={updateQueryString}\n          type=\"text\"\n          id=\"searchQuery\"\n          name=\"searchQuery\"\n          placeholder=\"Введіть назву фільму\"\n        />\n        <Button type=\"submit\">Пошук</Button>\n      </Form>\n      <ul>\n        {movies.map(movie => (\n          <li key={movie.id}>\n            <Link state={{ from: location }} to={`/movies/${movie.id}`}>\n              {movie.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '250b660de277c9bf01aaf41149686697';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport default class MovieAPI {\n  async getTrendingMovies() {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n      );\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getMovies(query) {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n      );\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getMovieDetails(movieId) {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n      );\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getMovieCredits(movieId) {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n      );\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getMovieReviews(movieId) {\n    try {\n      const response = await axios.get(\n        `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n      );\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n"],"names":["Form","styled","Label","Input","Button","movieApi","MovieAPI","Movies","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","searchQuery","setSearchQuery","location","useLocation","handleSubmit","e","preventDefault","getMovies","data","results","console","error","onSubmit","htmlFor","defaultValue","onChange","value","target","query","type","id","name","placeholder","map","movie","state","from","to","title","API_KEY","BASE_URL","axios","response","movieId"],"sourceRoot":""}